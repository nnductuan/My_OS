#include "port.h"

Port::Port(uint16_t portnumber){
	this->portnumber = portnumber;	
}

Port::~Port(){
}

Port8Bit::Port8Bit(uint16_t portnumber)
: Port(portnumber){
}
Port8Bit::~Port8Bit(){
}

Port8Bit::Write(uint8_t data){
	__asm__ volatile("outb %0, %1": : "a" (data), "Nd" (portnumber));
}

Port8Bit::Read(){
	uint8_t result;
	__asm__ volatile("inb %1, %0": "=a" (result) : "Nd" (portnumber));
}

Port16Bit::Port16Bit(uint16_t portnumber)
: Port(portnumber){
}
Port16Bit::~Port16Bit(){
}

Port16Bit::Write(uint8_t data){
	__asm__ volatile("outw %0, %1": : "a" (data), "Nd" (portnumber));
}

Port16Bit::Read(){
	uint8_t result;
	__asm__ volatile("inw %1, %0": "=a" (result) : "Nd" (portnumber));
}

Port32Bit::Port32Bit(uint16_t portnumber)
: Port(portnumber){
}
Port32Bit::~Port32Bit(){
}

Port32Bit::Write(uint8_t data){
	__asm__ volatile("outl %0, %1": : "a" (data), "Nd" (portnumber));
}

Port32Bit::Read(){
	uint8_t result;
	__asm__ volatile("inl %1, %0": "=a" (result) : "Nd" (portnumber));
}

Port8BitSlow::Port8BitSlow(uint16_t portnumber)
: Port8Bit(portnumber){
}
Port8BitSlow::~Port8BitSlow(){
}

Port8BitSlow::Write(uint8_t data){
	__asm__ volatile("outb %0, %1\njump 1f\n1: jump 1f\n1:": : "a" (data), "Nd" (portnumber));
}

Port8Bit::Read(){
	uint8_t result;
	__asm__ volatile("inb %1, %0": "=a" (result) : "Nd" (portnumber));
}






